class EmployeesController < ApplicationController
  before_action :authenticate_user!
  before_action :set_employee, only: [:show, :edit, :update, :destroy]

  def index
    @employees = Employee.order(:lastname, :firstname)

    # Initialiser la collection avec tous les employ√©s
    @selected_employees = @employees

    # Appliquer le filtre par groupe si pr√©sent
    if params[:group].present?
      @selected_employees = @selected_employees.where(group: params[:group])
    end

    # Appliquer le filtre par poste si pr√©sent
    if params[:position].present?
      @selected_employees = @selected_employees.where(position: params[:position])
    end

    # Compter le nombre total d'employ√©s
    @total_employees = Employee.count

    # Compter les employ√©s par groupe et par poste
    @group_counts = Employee.group(:group).count
    @position_counts = Employee.group(:position).count

    #@employees_all = Employee.all
    today = Date.today

    # V√©rifier si aujourd'hui est un jour de week-end ou un jour de repos pour chaque employ√©
    non_working_employees = @employees.select do |employee|
      employee.default_days_off.include?(today.wday) # V√©rifie si aujourd'hui est un jour de repos
    end.count

    # Nombre d'employ√©s en t√©l√©travail aujourd'hui
    @remote_count = Event.where(event_type: 't√©l√©travail')
                         .where("start_date <= ? AND end_date >= ?", today, today)
                         .count || 0

    # Nombre d'employ√©s en cong√© aujourd'hui
    @holiday_count = Event.where(event_type: 'cong√©')
                          .where("start_date <= ? AND end_date >= ?", today, today)
                          .count || 0

    # Nombre d'employ√©s en arr√™t maladie aujourd'hui
    @sick_count = Event.where(event_type: 'arr√™t_maladie')
                       .where("start_date <= ? AND end_date >= ?", today, today)
                       .count || 0

    # Nombre d'employ√©s sur site = Total - (T√©l√©travail + Cong√©s + Maladie + Jours non travaill√©s)
    @onsite_count = @employees.size - (@remote_count + @holiday_count + @sick_count + non_working_employees)
  end


  def show
    @employee = Employee.find(params[:id])
    current_year = Date.today.year

    # Initialisation des cong√©s pour l'ann√©e en cours
    @current_year_leaves = @employee.events.where(event_type: 'cong√©', status: 'approuv√©', start_date: Date.new(current_year)..Date.new(current_year).end_of_year)

    # Initialisation des jours de t√©l√©travail pour l'ann√©e en cours
    @current_year_teleworks = @employee.events.where(event_type: 't√©l√©travail', start_date: Date.new(current_year)..Date.new(current_year).end_of_year)

    # Initialisation des arr√™ts maladie pour l'ann√©e en cours
    @current_year_sick_leaves = @employee.events.where(event_type: 'arr√™t_maladie', start_date: Date.new(current_year)..Date.new(current_year).end_of_year)

    @leave_counts = {
      (current_year - 2) => @employee.events.where(event_type: 'cong√©', status: 'approuv√©', start_date: Date.new(current_year - 2)..Date.new(current_year - 2).end_of_year).sum(:leave_days_count),
      (current_year - 1) => @employee.events.where(event_type: 'cong√©', status: 'approuv√©', start_date: Date.new(current_year - 1)..Date.new(current_year - 1).end_of_year).sum(:leave_days_count),
      current_year => @current_year_leaves.sum(:leave_days_count)
    }
    @event = @employee.events.new # Initialisation pour √©viter le nil
    @expense = @employee.expenses.new # üëà D√©finit une nouvelle note de frais

    # V√©rifier et d√©finir l'ann√©e s√©lectionn√©e
    @selected_year = params[:year].present? ? params[:year].to_i : Date.today.year

    # Debug pour voir l'ann√©e s√©lectionn√©e
    puts "üîç Ann√©e s√©lectionn√©e : #{@selected_year}"

    # R√©cup√©rer les d√©penses approuv√©es de l'ann√©e s√©lectionn√©e
    approved_expenses = Expense.where(employee: @employee, status: 'approuv√©')
                               .where("extract(year from date) = ?", @selected_year)
                               .group("extract(month from date)")
                               .sum(:amount)

    puts "üìä D√©penses approuv√©es par mois (Raw SQL) : #{approved_expenses.inspect}"

    # Assurer que tous les mois sont pr√©sents m√™me si vides
    @approved_expenses_by_month = Hash.new(0)

    @employee.expenses.where(status: "approuv√©", date: Date.new(@selected_year)..Date.new(@selected_year, 12, 31)).each do |expense|
      month_index = expense.date.month - 1 # Mois de 1 √† 12 => Index de 0 √† 11
      @approved_expenses_by_month[month_index] += expense.amount
    end

    # Assurer que tous les mois sont pr√©sents, m√™me √† 0 ‚Ç¨
    @approved_expenses_by_month = (0..11).map { |i| @approved_expenses_by_month[i] || 0 }
    @expenses_json = @approved_expenses_by_month.to_json

    puts "üìä D√©penses par mois envoy√©es √† la vue : #{@approved_expenses_by_month.inspect}"

    puts "üìÜ Ann√©e s√©lectionn√©e : #{@selected_year}"
    puts "üîç D√©penses trouv√©es avant regroupement :"
    @employee.expenses.where(status: "approuv√©", date: Date.new(@selected_year)..Date.new(@selected_year, 12, 31)).each do |expense|
      puts "   - #{expense.date} : #{expense.amount} ‚Ç¨"

      @approved_expenses_by_month = (0..11).map do |i|
        (@approved_expenses_by_month[i] || 0).to_f
      end
    end
  end

  def new
    @employee = Employee.new
  end

  def create
    Rails.logger.info "===== D√©but de la m√©thode create ====="
    Rails.logger.info "Params re√ßus : #{params.inspect}"

    # Cr√©er ou r√©cup√©rer l'utilisateur associ√©
    user_email = params[:employee][:email]
    user = User.find_by(email: user_email)

    unless user
      Rails.logger.info "Aucun utilisateur trouv√© pour l'email #{user_email}, cr√©ation d'un nouvel utilisateur."
      user = User.new(
        email: user_email,
        password: SecureRandom.hex(8), # G√©n√®re un mot de passe al√©atoire
        role: "employee"
      )
      unless user.save
        Rails.logger.error "Erreur lors de la cr√©ation de l'utilisateur : #{user.errors.full_messages.join(", ")}"
        render :new, status: :unprocessable_entity and return
      end
    end

    # Cr√©er l'employ√© et l'associer √† l'utilisateur
    @employee = Employee.new(employee_params)
    @employee.user = user

    # Prioriser les champs personnalis√©s pour group et position
    @employee.group = params[:employee][:new_group].presence || @employee.group
    @employee.position = params[:employee][:new_position].presence || @employee.position

    if @employee.save
      Rails.logger.info "Employ√© cr√©√© avec succ√®s : #{@employee.inspect}"
      redirect_to employees_path, notice: "Employ√© cr√©√© avec succ√®s"
    else
      Rails.logger.error "Erreur lors de la sauvegarde de l'employ√© : #{@employee.errors.full_messages.join(", ")}"
      render :new, status: :unprocessable_entity
    end
    Rails.logger.info "===== Fin de la m√©thode create ====="
  end


  def edit; end

  def update
    if @employee.update(employee_params)
      redirect_to @employee, notice: "Employ√© mis √† jour avec succ√®s."
    else
      render :edit
    end
  end

  def destroy
    @employee = Employee.find(params[:id])
    @employee.destroy
    redirect_to employees_path, notice: "Employ√© supprim√© avec succ√®s."
  end

  def check_availability
    date = Date.parse(params[:date])
    employee = current_user.employee

    is_available = !employee.events.where(start_date: date, event_type: ['cong√©', 'arr√™t_maladie', 'heures_suppl√©mentaires']).exists?

    render json: { available: is_available }
  end

  def expenses_by_year
    @employee = Employee.find(params[:id])
    year = params[:year].to_i

    Rails.logger.debug "üîç API expenses_by_year - Employee ID: #{params[:id]}, Year: #{year}"

    start_date = Date.new(year, 1, 1)
    end_date = Date.new(year, 12, 31)

    approved_expenses = Array.new(12, 0)
    @employee.expenses.where(status: 'approuv√©', date: start_date..end_date).each do |expense|
      approved_expenses[expense.date.month - 1] += expense.amount
    end

    render json: { year: year, expenses: approved_expenses }
  end


  private

  def set_employee
    @employee = Employee.find(params[:id])
  end

  def employee_params
    params.require(:employee).permit(:firstname, :lastname, :email, :phone, :address, :position, :group, :hoursalary, :admin)
  end

end
